diff --git a/lib/neuralnetwork.js b/lib/neuralnetwork.js
index 8afbe9b..db88c06 100644
--- a/lib/neuralnetwork.js
+++ b/lib/neuralnetwork.js
@@ -1,11 +1,15 @@
 var _ = require("underscore"),
     lookup = require("./lookup");
 
+    console.log("using this brain");
+
 var NeuralNetwork = function(options) {
   options = options || {};
   this.learningRate = options.learningRate || 0.3;
   this.momentum = options.momentum || 0.1;
   this.hiddenSizes = options.hiddenLayers;
+
+  this.binaryThresh = options.binaryThresh || 0.5;
 }
 
 NeuralNetwork.prototype = {
@@ -195,9 +199,8 @@ NeuralNetwork.prototype = {
     return data;
   },
 
-  test : function(data, binaryThresh) {
+  test : function(data) {
     data = this.formatData(data);
-    binaryThresh = binaryThresh || 0.5;
 
     // for binary classification problems with one output node
     var isBinary = data[0].output.length == 1;
@@ -218,7 +221,7 @@ NeuralNetwork.prototype = {
 
       var actual, expected;
       if (isBinary) {
-        actual = output[0] > binaryThresh ? 1 : 0;
+        actual = output[0] > this.binaryThresh ? 1 : 0;
         expected = target[0];
       }
       else {
@@ -344,15 +347,16 @@ NeuralNetwork.prototype = {
       }
 
       var nodes = _(layer).keys();
-      this.sizes[i] = nodes.length;
-      this.weights[i] = [];
-      this.biases[i] = [];
-      this.outputs[i] = [];
+      var size = nodes.length;
+      this.sizes[i] = size;
+      this.weights[i] = new Array(size);
+      this.biases[i] = new Float64Array(size);
+      this.outputs[i] = new Float64Array(size);
 
       for (var j in nodes) {
         var node = nodes[j];
         this.biases[i][j] = layer[node].bias;
-        this.weights[i][j] = _(layer[node].weights).toArray();
+        this.weights[i][j] = new Float64Array(_(layer[node].weights).toArray());
       }
     }
     return this;
@@ -387,7 +391,8 @@ function randomWeight() {
 }
 
 function zeros(size) {
-  var array = new Array(size);
+  var array = new Float64Array(size);
+  return array;
   for (var i = 0; i < size; i++) {
     array[i] = 0;
   }
@@ -395,7 +400,7 @@ function zeros(size) {
 }
 
 function randos(size) {
-  var array = new Array(size);
+  var array = new Float64Array(size);
   for (var i = 0; i < size; i++) {
     array[i] = randomWeight();
   }
